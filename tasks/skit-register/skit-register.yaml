---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: skit-register
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: "https://cloud.ibm.com"
    - name: shuttle-properties-file
      description: name of the properties file that contain properties to include in the environment for the script execution
      default: ""
    - name: api-key
      description: IBM Cloud API key
    - name: app-name
      description: name of the cf or helm app
    - name: skit-name
      description: name of the skit
    - name: skit-git-url
      description: repo URL of the skit
    - name: skit-git-branch
      description: repo branch of the skit
    - name: skit-git-commit
      description: repo commit of the skit
    - name: enabled-helm
      description: whether helm pipeline is enabled
    - name: enabled-cf
      description: whether cf pipeline is enabled
    - name: deploy-target
      description: the deployment target
    - name: devex-skit-assets-git
      description: the org and repo name where skit assets are stored
      default: "IBM/devex-skit-assets"
    - name: devex-skit-assets-git-release
      description: the release branch for skit assets
    - name: devex-skit-assets-git-url-raw
      description: URL where skit asset releases are downloaded
    - name: skit-reg-endpoint
      description: the skit registration endpoint URL
      default: "https://devops-api.us-south.devops.cloud.ibm.com/v1/tekton-webhook/111efe7d-5858-4d5b-a5b4-cdd1d591ff78/run/eefc7f6c-0cbe-4eab-848f-2dfa44bd31de"
    - name: skit-reg-auth-token
      description: authentication token for executing skit registration
    - name: pipeline-debug
      description: Pipeline debug mode. Value can be 0 or 1. Default to 0
      default: "0"
    - name: register-skit
      description: if 'true', kick off registration pipeline
      default: "false"
    - name: exp-test-passed
      description: If true, the experience test passed and registration should be performed.
  results:
    - name: skit-reg-success
      description: If true, skit registration succeeded.
    - name: slack-msg
      description: If set, the message to send to Slack after this task. Typically only used to send a failure message.

  workspaces:
    - name: artifacts
      description: A workspace
      mountPath: /artifacts
  steps:
    - name: register
      image: ibmcom/pipeline-base-image:2.13
      workingDir: /artifacts
      env:
        - name: API_KEY
          value: $(params.api-key)
        - name: APP_NAME
          value: $(params.app-name)
        - name: ENABLED_HELM
          value: $(params.enabled-helm)
        - name: ENABLED_CF
          value: $(params.enabled-cf)
        - name: DEPLOY_TARGET
          value: $(params.deploy-target)
        - name: SKIT_NAME
          value: $(params.skit-name)
        - name: SKIT_URL
          value: $(params.skit-git-url)
        - name: SKIT_GIT_BRANCH
          value: $(params.skit-git-branch)
        - name: SKIT_GIT_COMMIT
          value: $(params.skit-git-commit)
        - name: SHUTTLE_PROPERTIES_FILE
          value: $(params.shuttle-properties-file)
        - name: DEVX_SKIT_ASSETS_GIT
          value: $(params.devex-skit-assets-git)
        - name: DEVX_SKIT_ASSETS_GIT_RELEASE
          value: $(params.devex-skit-assets-git-release)
        - name: DEVX_SKIT_ASSETS_GIT_URL_RAW
          value: $(params.devex-skit-assets-git-url-raw)
        - name: SKIT_REG_ENDPOINT
          value: $(params.skit-reg-endpoint)
        - name: SKIT_REG_AUTH_TOKEN
          value: $(params.skit-reg-auth-token)
        - name: PIPELINE_DEBUG
          value: $(params.pipeline-debug)
        - name: PIPELINE_RUN_URL
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']
        - name: REGISTER_SKIT
          value: $(params.register-skit)
        - name: EXP_TEST_PASSED
          value: $(params.exp-test-passed)

      script: |
        #!/bin/bash
        set -e -o pipefail

        if [ $PIPELINE_DEBUG == 1 ]; then
            env
            pwd
            ls -l
            trap env EXIT
            set -x
            cat $SHUTTLE_PROPERTIES_FILE
        fi

        if ! grep -q "pl_status=" < $SHUTTLE_PROPERTIES_FILE; then
          echo "pl_status=failed" >> $SHUTTLE_PROPERTIES_FILE
        fi

        if [ "${DEPLOY_TARGET}" == "helm" ] || [ "${DEPLOY_TARGET}" == "both" ] && [ "${ENABLED_HELM}" == "false" ]; then
            echo "Helm pipeline is disabled for this toolchain"
            exit 0
        fi

        if [ "${DEPLOY_TARGET}" == "cf" ] || [ "${DEPLOY_TARGET}" == "both" ] && [ "${ENABLED_CF}" == "false" ]; then
            echo "CF pipeline is disabled for this toolchain"
            exit 0
        fi

        if [ "$SHUTTLE_PROPERTIES_FILE" ]; then
          source $SHUTTLE_PROPERTIES_FILE
          export $(cut -d= -f1 $SHUTTLE_PROPERTIES_FILE)
        fi

        ibmcloud login -a "cloud.ibm.com" -r "us-south" --apikey "${API_KEY}" -g "devex-governance"

        if [ "$EXP_TEST_PASSED" == "true" ] && [ "$DEPLOY_TARGET" != "cf" ] && [ "$REGISTER_SKIT" == "true" ]; then
          source <(curl -sSL "$DEVX_SKIT_ASSETS_GIT_URL_RAW/scripts/skit_registration.sh")
          echo "Beginning skit registration..."
          register_skit
          if [ $REG_EXIT != 0 ]; then
            echo -n "false" > $(results.skit-reg-success.path)
            msg="Skit registration failed. Check the starter-kit-registration Tekton pipeline logs under DevOps Toolchains for details."
            fail_msg=":spinning-siren: $msg"
            echo -n "$fail_msg" > $(results.slack-msg.path)
            exit 1
          else
            echo -n "true" > $(results.skit-reg-success.path)
            echo -n "Skit registration succeeded!" > $(results.slack-msg.path)
          fi
        fi
      volumeMounts:
        - mountPath: /cd-config
          name: cd-config-volume
        - mountPath: /steps
          name: steps-volume
        - mountPath: /artifacts/_toolchain.json
          subPath: toolchain.json
          name: cd-config-volume
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json
