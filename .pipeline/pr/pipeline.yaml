---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: cf-pipeline
spec:
  params:
      # Repo and PR parameters
    - name: repository
      description: the git repo containing source code. If empty, the repository url will be found from toolchain
      default: ""
    - name: branch
      description: the branch for the git repo
      default: "master"
    - name: revision
      description: the git revision/commit of the target branch
    - name: pr-repository
      description: The git repo of the incoming changes
    - name: pr-branch
      description: the branch of the incoming changes
    - name: pr-revision
      description: the git revision/commit for the incoming changes
      # Parameters for cf
    - name: region
      description: Name of the region to deploy the CF app to. Default to the toolchain region
      default: ""
    - name: api-key
      description: IBM Cloud API key
    - name: cf-org
      description: Name of organization to deploy the CF app to
    - name: cf-space
      description: Name of space to deploy the CF app to
    - name: cf-app
      description: Name of the CF application to be deployed
    - name: pipeline-debug
      default: "0"
    - name: ibmcloud-api
      description: IBM Cloud instance to target
      default: "https://cloud.ibm.com"
    - name: custom-script
      description: user-provided script
      default: ""
      # Parameters for helm
    - name: path-to-context
      default: "."
    - name: path-to-dockerfile
      default: "."
    - name: dockerfile
      default: "Dockerfile"
    - name: build-args
      description: ibmcloud cr build argument list in the format 'KEY=VALUE' with a key-value pair per line.
      default: ""
    - name: registry-region
      description: The IBM Cloud region for image registry
    - name: registry-namespace
      description: container registry namespace
    - name: registry-create-namespace
      description: create container registry namespace if it doesn't already exists
      default: "true"
    - name: image-name
      description: image name
    - name: helm-chart-path
      description: |
        path to the folder containing the helm chart content (at least Chart.yaml).
        If not specified, it will default to first folder in /chart
      default: ""
    - name: dev-region
    - name: dev-resource-group
    - name: cluster-name
      description: the name of the cluster to target
    - name: dev-cluster-namespace
      description: the namespace
    - name: helm-upgrade-extra-args
      description: complementary argument for the helm upgrade command
      default: ""
    - name: fail-on-lint-errors
      description: force failure of task when docker lint errors are found
      default: "true"
    - name: fail-on-scanned-issues
      description: force failure of task when vulnerability advisor scan issues are found
      default: "true"
      # Misc parameters
    - name: pr-url
      description: pr url
    - name: scm-type
      default: "github"
    - name: project-id
      default: ""
    - name: devex-skit-assets-git
      description: the org and repo containing skit assets
    - name: devex-skit-assets-git-release
      description: the release version of the devex-skit-assets repo to use
    - name: devex-skit-assets-git-url
      description: the repo URL to the skit assets repo
    - name: devex-skit-assets-git-url-code
      description: the repo URL used to download skit asset releases
    - name: devex-skit-assets-git-url-raw
      description: the repo URL used to download skit asset raw code
    - name: deploy-target
      description: the deployment target
    - name: skit-name
    - name: skit-reg-endpoint
    - name: skit-reg-auth-token
    - name: devx-slack-channel-webhook
    - name: owner-slack-channel-webhook
    - name: enable-pd-alerts
    - name: pagerduty-events-api-url
    - name: pagerduty-api-token
    - name: enabled-cf
    - name: enabled-helm
    - name: docker-username
    - name: docker-password
    - name: context
      default: "skit-monitoring"
    - name: context-helm
      default: "helm-verification"
    - name: context-cf
      default: "cf-verification"
    - name: description
      default: "Testing the skit pipeline deploy automatically..."
  workspaces:
    - name: pipeline-ws
  tasks:
    - name: skit-git-clone
      taskRef:
        name: git-clone-repo
      params:
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: ibmcloud-apikey-secret-key
          value: "apikey"
        - name: ibmcloud-api
          value: $(params.ibmcloud-api)
        - name: repository
          value: $(params.pr-repository)
        - name: branch
          value: $(params.pr-branch)
        - name: revision
          value: $(params.pr-revision)
        - name: properties-file
          value: "build.properties"
        - name: directory-name
          value: ""
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: output
          workspace: pipeline-ws
    - name: assets-git-clone
      taskRef:
        name: git-clone-repo
      params:
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: ibmcloud-apikey-secret-key
          value: "apikey"
        - name: repository
          value: https://github.com/IBM/devex-skit-assets
        - name: branch
          value: $(params.devex-skit-assets-git-release)
        - name: revision
          value: ""
        - name: properties-file
          value: ""
        - name: directory-name
          value: ""
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: output
          workspace: pipeline-ws
    - name: cra-discovery-scan
      runAfter: [skit-git-clone, assets-git-clone]
      taskRef:
        name: cra-discovery
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
      params:
        - name: repository
          value: $(params.repository)
        - name: revision
          value: $(params.pr-branch)
        - name: commit-id
          value: $(tasks.skit-git-clone.results.git-commit)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: directory-name
          value: $(params.skit-name)
        - name: commit-timestamp
          value: ""
    - name: code-vulnerability-scan
      runAfter:
        - cra-discovery-scan
      taskRef:
        name: cra-vulnerability-remediation
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
        - name: secrets
          workspace: pipeline-ws
      params:
        - name: repository
          value: $(params.repository)
        - name: revision
          value: $(params.pr-branch)
        - name: pr-url
          value: $(params.pr-url)
        - name: commit-id
          value: $(tasks.skit-git-clone.results.git-commit)
        - name: scm-type
          value: $(params.scm-type)
        - name: project-id
          value: $(params.project-id) 
    - name: cra-cis-check
      taskRef:
        name: cra-cis-check
      runAfter:
        - cra-discovery-scan
      workspaces:
        - name: secrets
          workspace: pipeline-ws
        - name: artifacts
          workspace: pipeline-ws
      params:
        - name: repository
          value: $(params.repository)
        - name: revision
          value: $(params.pr-branch)
        - name: pr-url
          value: $(params.pr-url)
        - name: commit-id
          value: $(tasks.skit-git-clone.results.git-commit)
        - name: directory-name
          value: $(params.skit-name)
        - name: scm-type
          value: $(params.scm-type)
        - name: project-id
          value: $(params.project-id)
    - name: cra-bom
      taskRef:
        name: cra-bom
      runAfter:
        - cra-discovery-scan
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
        - name: secrets
          workspace: pipeline-ws          
      params:
        - name: repository
          value: $(params.pr-repository)
        - name: revision
          value: $(params.pr-branch)
        - name: pr-url
          value: $(params.pr-url)
        - name: commit-id
          value: $(params.pr-revision)
        - name: target-branch
          value: $(params.branch)
        - name: target-commit-id
          value: $(params.revision)      
        - name: scm-type
          value: $(params.scm-type)
        - name: project-id
          value: $(params.project-id)
    # - name: set-pr-status-cra-success
    #   taskRef:
    #     name: git-set-commit-status
    #   workspaces:
    #     - name: artifacts
    #       workspace: pipeline-ws
    #   params:
    #     - name: repository
    #       value: $(params.repository)
    #     - name: revision
    #       value: $(params.pr-revision)
    #     - name: context
    #       value: $(params.context-cra)
    #     - name: description
    #       value: $(params.description)
    #     - name: state
    #       value: $(tasks.cra-bom.results.status)
    #     - name: pipeline-debug
    #       value: $(params.pipeline-debug)
    - name: build
      runAfter: [assets-git-clone, skit-git-clone] #[code-vulnerability-scan, cra-cis-check, cra-bom]
      workspaces:
        - name: output
          workspace: pipeline-ws
      taskRef:
        name: toolchain-build
      params:
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: custom-script
          value: |
           if [[ -n $(find /artifacts -name pom.xml) ]]; then
            echo "Additional build required. Running Maven build."
            APP_NAME="$(params.skit-name)"
            cd /artifacts/$APP_NAME
            mvn -B package
           fi
    - name: set-pr-status-cf-pending
      when:
        - input: $(params.enabled-cf)
          operator: in
          values: ["true"]
      runAfter: [build]
      taskRef:
        name: git-set-commit-status
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
      params:
        - name: repository
          value: $(params.repository)
        - name: revision
          value: $(params.pr-revision)
        - name: context
          value: $(params.context-cf)
        - name: description
          value: $(params.description)
        - name: state
          value: "pending"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
    - name: rolling-deploy-task
      runAfter: [set-pr-status-cf-pending]
      taskRef:
        name: cf-deploy-app
      params:
        - name: shuttle-properties-file
          value: "/artifacts/build.properties"
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: cloud-foundry-apikey-secret-key
          value: "apikey"
        - name: region
          value: $(params.region)
        - name: cf-org
          value: $(params.cf-org)
        - name: cf-space
          value: $(params.cf-space)
        - name: cf-app
          value: $(params.cf-app)
        - name: setup-script
          value: |
            export SKIT_NAME="$(params.skit-name)"
            export SKIT_DIR=/artifacts/${SKIT_NAME}
            export DEPLOY_TARGET="cf"
            export DEVX_SKIT_ASSETS_GIT_REPO_DIR="/artifacts/devex-skit-assets"
            export DEVX_SKIT_ASSETS_GIT_URL_RAW=$(params.devex-skit-assets-git-url-raw)
            source /artifacts/devex-skit-assets/scripts/copy_assets.sh
        - name: cf-commands
          value: |
            #!/bin/bash
            set -e -o pipefail

            if [ $PIPELINE_DEBUG == 1 ]; then
                pwd
                env
                ls -l
                trap env EXIT
                set -x
                cat $SHUTTLE_PROPERTIES_FILE
            fi

            cd $SKIT_DIR
            # Push app
            if ! cf app "$CF_APP"; then  
              cf push "$CF_APP" -f ./manifest.yaml --hostname go-gin-app-devx-monitored-cf-pr #TODO: remove
            else
              OLD_CF_APP="${CF_APP}-OLD-$(date +"%s")"
              rollback() {
                set +e
                if cf app "$OLD_CF_APP"; then
                  cf logs "$CF_APP" --recent
                  cf delete "$CF_APP" -f
                  cf rename "$OLD_CF_APP" "$CF_APP"
                fi
                exit 1
              }
              set -e
              trap rollback ERR
              cf rename "$CF_APP" "$OLD_CF_APP"
              cf push "$CF_APP" -f ./manifest.yaml --hostname go-gin-app-devx-monitored-cf-pr #TODO: remove
              cf delete "$OLD_CF_APP" -f
            fi

            # Export app name and URL for use in later Pipeline jobs
            export CF_APP_NAME="$CF_APP"
            export APP_URL=https://$(cf app $CF_APP_NAME | grep -e urls: -e routes: | awk '{print $2}')

            # View logs
            cf logs "${CF_APP}" --recent

        - name: post-execution-script
          value: |
            # Keep APP_URL in shuttle file
            echo "CF_APP_URL=$APP_URL" >> $SHUTTLE_PROPERTIES_FILE
            echo "CF_ORG=$CF_ORG" >> $SHUTTLE_PROPERTIES_FILE
            echo "CF_SPACE=$CF_SPACE" >> $SHUTTLE_PROPERTIES_FILE

            if [ $PIPELINE_DEBUG == 1 ]; then
              pwd
              ls -l
              cat $SHUTTLE_PROPERTIES_FILE
            fi
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: source
          workspace: pipeline-ws
    - name: publish-deployable-task-cf
      taskRef:
        name: toolchain-publish-deployable-mapping
      params:
        - name: deployable-type
          value: "app"
        - name: deployable-region-id
          value: $(tasks.rolling-deploy-task.results.region)
        - name: deployable-guid
          value: $(tasks.rolling-deploy-task.results.cf-app-guid)
        - name: deployable-cf-org-id
          value: $(tasks.rolling-deploy-task.results.cf-org-id)
        - name: deployable-cf-org-name
          value: $(params.cf-org)
        - name: deployable-cf-space-id
          value: $(tasks.rolling-deploy-task.results.cf-space-id)
        - name: deployable-cf-space-name
          value: $(params.cf-space)
        - name: environment-label
          value: "$(params.cf-org):$(params.cf-space)"
        - name: git-inputs
          value: "$(tasks.skit-git-clone.results.git-repository),$(tasks.skit-git-clone.results.git-commit),$(tasks.skit-git-clone.results.git-branch)"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: ibmcloud-api
          value: $(params.ibmcloud-api)
    - name: cf-skit-alert-and-verification
      taskRef:
        name: skit-alert-and-verification
      runAfter: [rolling-deploy-task]
      params:
        - name: shuttle-properties-file
          value: "/artifacts/build.properties"
        - name: api-key
          value: $(params.api-key)
        - name: app-name
          value: $(params.skit-name)
        - name: skit-git-url
          value: $(tasks.skit-git-clone.results.git-repository)
        - name: skit-git-branch
          value: $(tasks.skit-git-clone.results.git-branch)
        - name: skit-git-commit
          value: $(tasks.skit-git-clone.results.git-commit)
        - name: enabled-helm
          value: $(params.enabled-helm)
        - name: enabled-cf
          value: $(params.enabled-cf)
        - name: deploy-target
          value: "cf"
        - name: devex-skit-assets-git
          value: $(params.devex-skit-assets-git)
        - name: devex-skit-assets-git-release
          value: $(params.devex-skit-assets-git-release)
        - name: devex-skit-assets-git-url-raw
          value: $(params.devex-skit-assets-git-url-raw)
        - name: skit-reg-endpoint
          value: $(params.skit-reg-endpoint)
        - name: skit-reg-auth-token
          value: $(params.skit-reg-auth-token)
        - name: devx-slack-channel-webhook
          value: $(params.devx-slack-channel-webhook)
        - name: owner-slack-channel-webhook
          value: $(params.owner-slack-channel-webhook)
        - name: enable-pd-alerts
          value: $(params.enable-pd-alerts)
        - name: pagerduty-events-api-url
          value: $(params.pagerduty-events-api-url)
        - name: pagerduty-api-token
          value: $(params.pagerduty-api-token)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: enable-pd-alerts
          value: "true"
        - name: enable-slack-alerts
          value: "true"
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: set-pr-status-cf-success
      runAfter: [cf-skit-alert-and-verification]
      taskRef:
        name: git-set-commit-status
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
      params:
        - name: repository
          value: $(params.repository)
        - name: revision
          value: $(params.pr-revision)
        - name: context
          value: $(params.context-cf)
        - name: description
          value: $(params.description)
        - name: state
          value: "success"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
    ### HELM DEPLOY
    - name: extract-doi-enablement
      taskRef:
        name: toolchain-extract-value
      params:
        # count the number of service in the toolchain that are DevopsInsights
        - name: expression
          value: 'reduce .services[] as $service (0; if $service.service_id=="draservicebroker" then .+1 else . end)'
        - name: pipeline-debug
          value: $(params.pipeline-debug)
    - name: publish-doi-buildrecord
      runAfter: [extract-doi-enablement]
      when:
        - input: $(tasks.extract-doi-enablement.results.extracted-value)
          operator: in
          values: ["1"]
      taskRef:
        name: doi-publish-buildrecord
      params:
        - name: toolchain-apikey-secret-key
          value: "apikey"
        - name: app-name
          value: $(params.skit-name)
        - name: git-repository
          value: $(tasks.skit-git-clone.results.git-repository)
        - name: git-branch
          value: $(tasks.skit-git-clone.results.git-branch)
        - name: git-commit
          value: $(tasks.skit-git-clone.results.git-commit)
    - name: docker-lint
      runAfter: [skit-git-clone, assets-git-clone]
      taskRef:
        name: linter-docker-lint
      params:
        - name: path-to-dockerfile
          value: /artifacts/$(params.skit-name)
        - name: dockerfile
          value: $(params.dockerfile)
        - name: fail-on-lint-errors
          value: $(params.fail-on-lint-errors)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: workspace
          workspace: pipeline-ws
    - name: unit-tests
      runAfter: [docker-lint, build]
      taskRef:
        name: tester-run-tests
      params:
        - name: tests-script
          value: |
            if [ -f ./test/run-tests.sh ]; then
              source ./test/run-tests.sh
              echo -n $FILE_LOCATIONS > $(results.test-result-file-paths.path)
              echo -n $TEST_TYPES > $(results.test-types.path)
            else
              echo "Test runner script not found: ./test/run-tests.sh"
            fi
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: publish-doi-code-tests
      runAfter: [unit-tests]
      when:
        - input: $(tasks.extract-doi-enablement.results.extracted-value)
          operator: in
          values: ["1"]
      taskRef:
        name: doi-publish-testrecord
      params:
        - name: toolchain-apikey-secret-key
          value: "apikey"
        - name: build-number
          value: "$(tasks.publish-doi-buildrecord.results.build-number)"
        - name: app-name
          value: $(params.skit-name)
        - name: file-locations
          value: "$(tasks.unit-tests.results.test-result-file-paths)"
        - name: test-types
          value: "$(tasks.unit-tests.results.test-types)"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: set-pr-status-helm-pending
      when:
        - input: $(params.enabled-helm)
          operator: in
          values: ["true"]
      runAfter: [build]
      taskRef:
        name: git-set-commit-status
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
      params:
        - name: repository
          value: $(params.repository)
        - name: revision
          value: $(params.pr-revision)
        - name: context
          value: $(params.context-helm)
        - name: description
          value: $(params.description)
        - name: state
          value: "pending"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
    - name: containerize
      runAfter: [set-pr-status-helm-pending]
      taskRef:
        name: icr-execute-in-dind
      params:
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: container-registry-apikey-secret-key
          value: "apikey"
        - name: registry-create-namespace
          value: $(params.registry-create-namespace)
        - name: registry-region
          value: $(params.registry-region)
        - name: registry-namespace
          value: $(params.registry-namespace)
        - name: image-name
          value: $(params.image-name)
        - name: path-to-context
          value: /artifacts/$(params.skit-name)
        - name: path-to-dockerfile
          value: /artifacts/$(params.skit-name)
        - name: dockerfile
          value: $(params.dockerfile)
        - name: docker-commands
          value: |
            # Minting image tag using format: BUILD_NUMBER-BRANCH-COMMIT_ID-TIMESTAMP
            # e.g. 3-master-50da6912-20181123114435
            # (use build number as first segment to allow image tag as a patch release name according to semantic versioning)
            GIT_BRANCH="$(tasks.skit-git-clone.results.git-branch)"
            GIT_COMMIT="$(tasks.skit-git-clone.results.git-commit)"
            TIMESTAMP=$( date -u "+%Y%m%d%H%M%S")
            IMAGE_TAG=${TIMESTAMP}
            if [ ! -z "${GIT_COMMIT}" ]; then
              GIT_COMMIT_SHORT=$( echo ${GIT_COMMIT} | head -c 8 )
              IMAGE_TAG=${GIT_COMMIT_SHORT}-${IMAGE_TAG}
            fi
            if [ ! -z "${GIT_BRANCH}" ]; then IMAGE_TAG=${GIT_BRANCH}-${IMAGE_TAG} ; fi
            IMAGE_TAG=${BUILD_NUMBER}-${IMAGE_TAG}
            echo "$IMAGE_TAG"
            # avoid docker pull rate limit
            docker login --username $(params.docker-username) --password $(params.docker-password)
            # Default docker build / inspect / push command
            docker build --tag "$IMAGE_URL:$IMAGE_TAG" --file $PATH_TO_DOCKERFILE/$DOCKERFILE $PATH_TO_CONTEXT
            docker inspect ${IMAGE_URL}:${IMAGE_TAG}
            docker push ${IMAGE_URL}:${IMAGE_TAG}
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: source
          workspace: pipeline-ws
    - name: vulnerability-advisor
      taskRef:
        name: icr-check-va-scan
      params:
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: container-registry-apikey-secret-key
          value: "apikey"
        - name: scan-report-file
          value: 'app-image-va-report.json'
        - name: fail-on-scanned-issues
          value: $(params.fail-on-scanned-issues)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: image-url
          value: $(tasks.containerize.results.image-repository)
        - name: image-digest
          value: $(tasks.containerize.results.image-digest)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: publish-doi-va-scan-record
      runAfter: [vulnerability-advisor]
      when:
        - input: $(tasks.extract-doi-enablement.results.extracted-value)
          operator: in
          values: ["1"]
      taskRef:
        name: doi-publish-testrecord
      params:
        - name: toolchain-apikey-secret-key
          value: "apikey"
        - name: build-number
          value: "$(tasks.publish-doi-buildrecord.results.build-number)"
        - name: app-name
          value: $(params.skit-name)
        - name: file-locations
          value: $(tasks.vulnerability-advisor.results.scan-report-file)
        - name: test-types
          value: vulnerabilityadvisor
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: deploy-to-kubernetes
      taskRef:
        name: iks-deploy-to-kubernetes
      runAfter: [vulnerability-advisor]
      params:
        - name: shuttle-properties-file
          value: "/artifacts/build.properties"
        - name: cluster-region
          value: $(params.dev-region)
        - name: resource-group
          value: $(params.dev-resource-group)
        - name: cluster-name
          value: $(params.cluster-name)
        - name: setup-script
          value: |
            export CLUSTER_NAMESPACE="$(params.dev-cluster-namespace)"
            export CHART_PATH="$(params.helm-chart-path)"
            export HELM_UPGRADE_EXTRA_ARGS="$(params.helm-upgrade-extra-args)"
            # pipeline build number is the doi build record id (if any)
            export SOURCE_BUILD_NUMBER=$BUILD_NUMBER
            echo "SOURCE_BUILD_NUMBER=$BUILD_NUMBER" >> $SHUTTLE_PROPERTIES_FILE
            # For doi plugin invocation if needed
            export TOOLCHAIN_ID=$PIPELINE_TOOLCHAIN_ID
            # Single tag for the image built
            export IMAGE_TAG=$IMAGE_TAGS
            # Keep it in $SHUTTLE_PROPERTIES_FILE shuttle file
            echo "IMAGE_TAG=$IMAGE_TAGS" >> $SHUTTLE_PROPERTIES_FILE
            export SKIT_NAME="$(params.skit-name)"
            export SKIT_DIR=/artifacts/${SKIT_NAME}
            export DEPLOY_TARGET="helm"
            export DEVX_SKIT_ASSETS_GIT_REPO_DIR="/artifacts/devex-skit-assets"
            export DEVX_SKIT_ASSETS_GIT_URL_RAW="$(params.devex-skit-assets-git-url-raw)"
            # use custom release name to avoid long names for watson skits
            CHART_NAME=$(basename $CHART_PATH)
            case "$CHART_NAME" in
                  naturallanguageunderstandingmonitoredhelm) export RELEASE_NAME="nlu-code-pattern-monitored-helm"
                  ;;
                  naturallanguageunderstandingmonitoredhelmpr) export RELEASE_NAME="nlu-code-pattern-monitored-helm-pr"
                  ;;
                  texttospeechmonitoredhelm) export RELEASE_NAME="text2speech-code-pattern-monitored-helm"
                  ;;
                  texttospeechmonitoredhelmpr) export RELEASE_NAME="text2speech-code-pattern-monitored-helm-pr"
                  ;;
                  speechtotextmonitoredhelm) export RELEASE_NAME="speech2text-code-pattern-monitored-helm"
                  ;;
                  speechtotextmonitoredhelmpr) export RELEASE_NAME="speech2text-code-pattern-monitored-helm-pr"
                  ;;
                  *) export RELEASE_NAME=""
            esac
            source <(curl -sSL "$DEVX_SKIT_ASSETS_GIT_URL_RAW/scripts/copy_assets.sh")
        - name: script
          value: |
            # uncomment to debug the script
            # set -x
            # copy the script below into your app code repo (e.g. ./scripts/check_and_deploy_helm3.sh) and 'source' it from your pipeline job
            #    source ./scripts/check_and_deploy_helm3.sh
            # alternatively, you can source it from online script:
            #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_and_deploy_helm3.sh")
            # ------------------
            # source: https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_and_deploy_helm3.sh
            # This script checks the IBM Container Service cluster is ready, has a namespace configured with access to the private
            # image registry (using an IBM Cloud API Key), perform a kubectl deploy of container image and check on outcome.
            source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_and_deploy_helm3.sh")
        - name: post-execution-script
          value: |
            # Keep APP_URL in $SHUTTLE_PROPERTIES_FILE shuttle file
            echo "HELM_APP_URL=$APP_URL" >> $SHUTTLE_PROPERTIES_FILE
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: publish-deployable-task-helm
      runAfter: [deploy-to-kubernetes]
      taskRef:
        name: toolchain-publish-deployable-mapping
      params:
        - name: deployable-type
          value: "kubernetes_cluster"
        - name: deployable-region-id
          value: $(tasks.deploy-to-kubernetes.results.region)
        - name: deployable-guid
          value: $(tasks.deploy-to-kubernetes.results.cluster-id)
        - name: deployable-rg-id
          value: $(tasks.deploy-to-kubernetes.results.resource-group-id)
        - name: deployable-url
          value: $(tasks.deploy-to-kubernetes.results.app-url)
        - name: environment-label
          value: "$(params.cluster-name) namespace:$(params.dev-cluster-namespace)"
        - name: git-inputs
          value: "$(tasks.skit-git-clone.results.git-repository),$(tasks.skit-git-clone.results.git-commit),$(tasks.skit-git-clone.results.git-branch)"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
    - name: check-health
      taskRef:
        name: iks-deploy-to-kubernetes
      runAfter: [deploy-to-kubernetes]
      params:
        - name: shuttle-properties-file
          value: "/artifacts/build.properties"
        - name: cluster-region
          value: $(params.dev-region)
        - name: resource-group
          value: $(params.dev-resource-group)
        - name: cluster-name
          value: $(params.cluster-name)
        - name: setup-script
          value: |
            export CLUSTER_NAMESPACE="$(params.dev-cluster-namespace)"
        - name: script
          value: |
            # uncomment to debug the script
            # set -x
            # copy the script below into your app code repo (e.g. ./scripts/check_health.sh) and 'source' it from your pipeline job
            #    source ./scripts/check_health.sh
            # alternatively, you can source it from online script:
            #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_health.sh")
            # ------------------
            # source: https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_health.sh
            # Check liveness and readiness probes to confirm application is healthy
            source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_health.sh")
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: helm-skit-alert-and-verification
      taskRef:
        name: skit-alert-and-verification
      runAfter: [deploy-to-kubernetes, check-health]
      params:
        - name: shuttle-properties-file
          value: "/artifacts/build.properties"
        - name: api-key
          value: $(params.api-key)
        - name: app-name
          value: $(params.skit-name)
        - name: skit-git-url
          value: $(tasks.skit-git-clone.results.git-repository)
        - name: skit-git-branch
          value: $(tasks.skit-git-clone.results.git-branch)
        - name: skit-git-commit
          value: $(tasks.skit-git-clone.results.git-commit)
        - name: enabled-helm
          value: $(params.enabled-helm)
        - name: enabled-cf
          value: $(params.enabled-cf)
        - name: deploy-target
          value: "helm"
        - name: devex-skit-assets-git
          value: $(params.devex-skit-assets-git)
        - name: devex-skit-assets-git-release
          value: $(params.devex-skit-assets-git-release)
        - name: devex-skit-assets-git-url-raw
          value: $(params.devex-skit-assets-git-url-raw)
        - name: skit-reg-endpoint
          value: $(params.skit-reg-endpoint)
        - name: skit-reg-auth-token
          value: $(params.skit-reg-auth-token)
        - name: devx-slack-channel-webhook
          value: $(params.devx-slack-channel-webhook)
        - name: owner-slack-channel-webhook
          value: $(params.owner-slack-channel-webhook)
        - name: enable-pd-alerts
          value: $(params.enable-pd-alerts)
        - name: pagerduty-events-api-url
          value: $(params.pagerduty-events-api-url)
        - name: pagerduty-api-token
          value: $(params.pagerduty-api-token)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: enable-pd-alerts
          value: "true"
        - name: enable-slack-alerts
          value: "true"
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: set-pr-status-helm-success
      runAfter: [helm-skit-alert-and-verification]
      taskRef:
        name: git-set-commit-status
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
      params:
        - name: repository
          value: $(params.repository)
        - name: revision
          value: $(params.pr-revision)
        - name: context
          value: $(params.context-helm)
        - name: description
          value: $(params.description)
        - name: state
          value: "success"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
  # finally:
    # - name: evaluate-success
    #   taskRef:
    #     name: 
    # - name: set-pr-status-verification-results
    #   taskRef:
    #     name: git-set-commit-status
    #   workspaces:
    #     - name: artifacts
    #       workspace: pipeline-ws
    #   params:
    #     - name: repository
    #       value: $(params.repository)
    #     - name: revision
    #       value: $(params.pr-revision)
    #     - name: context
    #       value: $(params.context)
    #     - name: description
    #       value: "View app at: https://$(params.skit-name)-devx-monitored-cf-pr.mybluemix.net"
    #     - name: state
    #       value: $(tasks.skit-alert-and-verification.status)
    #     - name: pipeline-debug
    #       value: $(params.pipeline-debug)