properties:
- name: IBM_CLOUD_API_KEY
  type: secure
- name: HELM_VERSION
  type: text
  value: ""
stages:
- name: Build
  inputs:
  - branch: master
    type: git
    service: skitgitrepo
  properties:
  - name: GIT_URL
    type: text
    value: ${GIT_URL}
  - name: IMAGE_NAME
    type: text
    value: ${APP_NAME}-monitored-helm
  - name: DEVX_SKIT_ASSETS_GIT
    type: text
    value: IBM/devex-skit-assets
  - name: DEVX_SKIT_ASSETS_GIT_RELEASE
    type: text
    value: ${DEVX_SKIT_ASSETS_GIT_RELEASE}
  - name: DEVX_SKIT_ASSETS_GIT_URL
    type: text
    value: https://github.com/${DEVX_SKIT_ASSETS_GIT}.git
  - name: DEVX_SKIT_ASSETS_GIT_URL_RAW
    type: text
    value: https://github.com/${DEVX_SKIT_ASSETS_GIT}/raw/${DEVX_SKIT_ASSETS_GIT_RELEASE}
  - name: DEVX_SKIT_ASSETS_GIT_URL_CODE
    type: text
    value: https://codeload.github.com/${DEVX_SKIT_ASSETS_GIT}/tar.gz/${DEVX_SKIT_ASSETS_GIT_RELEASE}
  - name: DEPLOY_TARGET
    type: text
    value: helm
  - name: ENABLED_HELM
    type: text
    value: ${ENABLED_HELM}
  - name: DEVX_SLACK_CHANNEL_WEBHOOK
    type: secure
    value: ${DEVX_SLACK_CHANNEL_WEBHOOK}
  - name: OWNER_SLACK_CHANNEL_WEBHOOK
    type: secure
    value: ${OWNER_SLACK_CHANNEL_WEBHOOK}
  - name: PAGERDUTY_API_URL
    type: text
    value: ${PAGERDUTY_API_URL}
  - name: PAGERDUTY_EVENTS_API_URL
    type: text
    value: ${PAGERDUTY_EVENTS_API_URL}
  - name: PAGERDUTY_API_TOKEN
    type: secure
    value: ${PAGERDUTY_API_TOKEN}
  - name: PAGERDUTY_SVC_NAME
    type: secure
    value: ${PAGERDUTY_SVC_NAME}
  - name: ENABLE_PD_ALERTS
    type: text
    value: "true"
  - name: SKIT_REG_ENDPOINT
    type: text
    value: ${SKIT_REG_ENDPOINT}
  - name: SKIT_REG_AUTH_TOKEN
    type: secure
    value: ${SKIT_REG_AUTH_TOKEN}
  triggers:
  - events: '{"push":true,"pull_request":false,"pull_request_closed":false}'
    type: git
  jobs:
  - name: Fetch code
    type: builder
    build_type: shell
    artifact_dir: ""
    script: |
      #!/bin/bash
      # uncomment to debug the script
      # set -x

      if [ "${ENABLED_HELM}" == "false" ]; then
          echo "Helm pipeline is disabled for this toolchain"
          exit 0
      fi

      function check_exit
      {
        rv=$?
        if [ $rv != 0 ]; then
            msg="Fetch Code Failed :spinning-siren:"
            echo "${msg}"
            # copy the script below into your app code repo (e.g. ./scripts/slack_message.sh) and 'source' it from your pipeline job
            #    source ./scripts/slack_message.sh
            # alternatively, you can source it from online script:
            #    source <(curl -sSL "https://github.com/IBM/devex-skit-assets/raw/<release>/scripts/slack_message.sh")
            source <(curl -sSL "$DEVX_SKIT_ASSETS_GIT_URL_RAW/scripts/slack_message.sh") "${msg}"
            exit 1
        else
            exit 0
        fi
      }

      trap 'check_exit' EXIT
      # copy the script below into your app code repo (e.g. ./scripts/build_fetch_code.sh) and 'source' it from your pipeline job
      #    source ./scripts/build_fetch_code.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://github.com/IBM/devex-skit-assets/raw/<release>/scripts/build_fetch_code.sh")
      source <(curl -sSL "$DEVX_SKIT_ASSETS_GIT_URL_RAW/scripts/build_fetch_code.sh")
  - name: Unit Tests
    type: tester
    test_type: simple
    script: |
      #!/bin/bash
      # uncomment to debug the script
      # set -x

      if [ "${ENABLED_HELM}" == "false" ]; then
          echo "Helm pipeline is disabled for this toolchain"
          exit 0
      fi

      function check_exit
      {
        rv=$?
        if [ $rv != 0 ]; then
            msg="Unit Tests Failed :spinning-siren:"
            echo "${msg}"
            # copy the script below into your app code repo (e.g. ./scripts/slack_message.sh) and 'source' it from your pipeline job
            #    source ./scripts/slack_message.sh
            # alternatively, you can source it from online script:
            #    source <(curl -sSL "https://github.com/IBM/devex-skit-assets/raw/<release>/scripts/slack_message.sh")
            source <(curl -sSL "$DEVX_SKIT_ASSETS_GIT_URL_RAW/scripts/slack_message.sh") "${msg}"
            exit 1
        else
            exit 0
        fi
      }

      trap 'check_exit' EXIT
      # copy the script below into your app code repo (e.g. ./scripts/build_unit_test.sh) and 'source' it from your pipeline job
      #    source ./scripts/build_unit_test.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://github.com/IBM/devex-skit-assets/raw/<release>/scripts/build_unit_test.sh")
      source <(curl -sSL "$DEVX_SKIT_ASSETS_GIT_URL_RAW/scripts/build_unit_test.sh")
- name: Containerize
  inputs:
  - type: job
    job: Fetch code
    stage: Build
  properties:
  - name: buildprops
    type: file
    value: build.properties
  - name: DOCKER_ROOT
    type: text
    value: .
  - name: DOCKER_FILE
    type: text
    value: Dockerfile
  - name: PIPELINE_IMAGE_URL
    type: text
    value: ""
  triggers:
  - type: stage
  jobs:
  - name: Build container image
    type: builder
    artifact_dir: output
    build_type: cr
    image_name: ${IMAGE_NAME}
    namespace: devex_namespace
    target:
      api_key: ${API_KEY}
      region_id: ${REGISTRY_REGION_ID}
    script: |-
      #!/bin/bash
      # uncomment to debug the script
      # set -x

      if [ "${ENABLED_HELM}" == "false" ]; then
          echo "Helm pipeline is disabled for this toolchain"
          exit 0
      fi

      for i in {1..3}
      do
        echo "Beginning Build Container Image attempt $i"
        set -e
        EXIT_CODE=0
        # copy the script below into your app code repo (e.g. ./scripts/containerize_build_container_img.sh) and 'source' it from your pipeline job
        #    source ./scripts/containerize_build_container_img.sh
        # alternatively, you can source it from online script:
        #    source <(curl -sSL "https://github.com/IBM/devex-skit-assets/raw/<release>/scripts/containerize_build_container_img.sh")
        source <(curl -sSL "$DEVX_SKIT_ASSETS_GIT_URL_RAW/scripts/containerize_build_container_img.sh") || EXIT_CODE=$?
        if [ "${EXIT_CODE}" == "0" ]; then
          echo "Build Container Image succeeded"
          break
        fi
      done

      if [ "${EXIT_CODE}" != "0" ]; then
        msg="Build Container Image Failed :spinning-siren:"
        echo "${msg}"
        # copy the script below into your app code repo (e.g. ./scripts/slack_message.sh) and 'source' it from your pipeline job
        #    source ./scripts/slack_message.sh
        # alternatively, you can source it from online script:
        #    source <(curl -sSL "https://github.com/IBM/devex-skit-assets/raw/<release>/scripts/slack_message.sh")
        source <(curl -sSL "$DEVX_SKIT_ASSETS_GIT_URL_RAW/scripts/slack_message.sh") "${msg}"
        exit 1
      fi
  - name: Check vulnerabilities
    type: tester
    test_type: vulnerabilityadvisor
    use_image_from_build_input: true
    fail_stage: false
    target:
      region_id: ${REGISTRY_REGION_ID}
      api_key: ${API_KEY}
    script: |
      #!/bin/bash
      # uncomment to debug the script
      # set -x

      if [ "${ENABLED_HELM}" == "false" ]; then
          echo "CF pipeline is disabled for this toolchain"
          exit 0
      fi

      # copy the script below into your app code repo (e.g. ./scripts/check_vulnerabilities.sh) and 'source' it from your pipeline job
      #    source ./scripts/check_vulnerabilities.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://github.com/IBM/devex-skit-assets/raw/<release>/scripts/check_vulnerabilities.sh")
      source <(curl -sSL "$DEVX_SKIT_ASSETS_GIT_URL_RAW/scripts/check_vulnerabilities.sh")
- name: Deploy
  inputs:
  - type: job
    job: Build container image
    stage: Containerize
  properties:
  - name: buildProperties
    type: file
    value: build.properties
  - name: CLUSTER_NAMESPACE
    type: text
    value: default
  - name: CHART_ROOT
    type: text
    value: chart
  - name: APP_URL
    type: text
    value: ""
  triggers:
  - type: stage
  jobs:
  - name: Deploy with Helm
    type: deployer
    deploy_type: kubernetes
    target:
      region_id: ${PROD_REGION_ID}
      resource_group: ${PROD_RESOURCE_GROUP}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |-
      #!/bin/bash
      # uncomment to debug the script
      # set -x

      if [ "${ENABLED_HELM}" == "false" ]; then
          echo "Helm pipeline is disabled for this toolchain"
          exit 0
      fi

      for i in {1..3}
      do
        echo "Beginning Deploy attempt $i"
        set -e
        EXIT_CODE=0
        # copy the script below into your app code repo (e.g. ./scripts/deploy_helm.sh) and 'source' it from your pipeline job
        #    source ./scripts/deploy_helm.sh
        # alternatively, you can source it from online script:
        #    source <(curl -sSL "https://github.com/IBM/devex-skit-assets/raw/<release>/scripts/deploy_helm.sh")
        source <(curl -sSL "$DEVX_SKIT_ASSETS_GIT_URL_RAW/scripts/deploy_helm.sh") || EXIT_CODE=$?
        if [ "${EXIT_CODE}" == "0" ]; then
          echo "Deploy succeeded"
          break
        fi
      done

      if [ "${EXIT_CODE}" != "0" ]; then
        msg="Deploy Failed :spinning-siren:"
        echo "${msg}"
        # copy the script below into your app code repo (e.g. ./scripts/slack_message.sh) and 'source' it from your pipeline job
        #    source ./scripts/slack_message.sh
        # alternatively, you can source it from online script:
        #    source <(curl -sSL "https://github.com/IBM/devex-skit-assets/raw/<release>/scripts/slack_message.sh")
        source <(curl -sSL "$DEVX_SKIT_ASSETS_GIT_URL_RAW/scripts/slack_message.sh") "${msg}"
        exit 1
      fi
  - name: Check health
    type: deployer
    deploy_type: kubernetes
    target:
      region_id: ${PROD_REGION_ID}
      resource_group: ${PROD_RESOURCE_GROUP}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |-
      #!/bin/bash
      # uncomment to debug the script
      # set -x

      if [ "${ENABLED_HELM}" == "false" ]; then
          echo "Helm pipeline is disabled for this toolchain"
          exit 0
      fi

      for i in {1..3}
      do
        echo "Beginning Check Health attempt $i"
        set -e
        EXIT_CODE=0
        # copy the script below into your app code repo (e.g. ./scripts/deploy_check_health.sh) and 'source' it from your pipeline job
        #    source ./scripts/deploy_check_health.sh
        # alternatively, you can source it from online script:
        #    source <(curl -sSL "https://github.com/IBM/devex-skit-assets/raw/<release>/scripts/deploy_check_health.sh")
        source <(curl -sSL "$DEVX_SKIT_ASSETS_GIT_URL_RAW/scripts/deploy_check_health.sh") || EXIT_CODE=$?
        if [ "${EXIT_CODE}" == "0" ]; then
          echo "Check Health succeeded"
          break
        fi
      done

      if [ "${EXIT_CODE}" != "0" ]; then
        msg="Check Health Failed :spinning-siren:"
        echo "${msg}"
        # copy the script below into your app code repo (e.g. ./scripts/slack_message.sh) and 'source' it from your pipeline job
        #    source ./scripts/slack_message.sh
        # alternatively, you can source it from online script:
        #    source <(curl -sSL "https://github.com/IBM/devex-skit-assets/raw/<release>/scripts/slack_message.sh")
        source <(curl -sSL "$DEVX_SKIT_ASSETS_GIT_URL_RAW/scripts/slack_message.sh") "${msg}"
        exit 1
      fi
  - name: Export App URL
    type: builder
    curatedDockerImage: default
    artifact_dir: ''
    build_type: shell
    script: |-
      #!/bin/bash
      # your script here
      set -x

      # If already defined build.properties from prior build job, append to it.
      cp build.properties $ARCHIVE_DIR/ || :

      # APP_URL is used by experience test
      echo "APP_URL=${APP_URL}" >> $ARCHIVE_DIR/build.properties
      echo "File 'build.properties' created for passing env variables to subsequent pipeline jobs:"
      cat $ARCHIVE_DIR/build.properties | grep -v -i password
- name: Verification
  inputs:
  - type: job
    stage: Deploy
    job: Export App URL
    dir_name: null
  properties:
  - name: buildProperties
    type: file
    value: build.properties
  triggers:
  - type: stage
  jobs:
  - name: Experience Test
    type: deployer
    deploy_type: kubernetes
    target:
      region_id: ${PROD_REGION_ID}
      resource_group: ${PROD_RESOURCE_GROUP}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |-
      #!/bin/bash
      # uncomment to debug the script
      # set -x

      if [ "${ENABLED_HELM}" == "false" ]; then
          echo "CF pipeline is disabled for this toolchain"
          exit 0
      fi

      # copy the script below into your app code repo (e.g. ./scripts/verification_experience_test.sh) and 'source' it from your pipeline job
      #    source ./scripts/verification_experience_test.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://github.com/IBM/devex-skit-assets/raw/<release>/scripts/verification_experience_test.sh")
      source <(curl -sSL "$DEVX_SKIT_ASSETS_GIT_URL_RAW/scripts/verification_experience_test.sh")
