stages:
- name: Build
  inputs:
  - type: git
    branch: master
    service: skitgitrepo
  jobs:
  - name: Build
    type: builder
    build_type: shell
    artifact_dir: ""
    curatedDockerImage: default
    script: |
      #!/bin/bash
      # uncomment to debug the script
      # set -x

      if [ "${ENABLED_CF}" == "false" ]; then
          echo "CF pipeline is disabled for this toolchain"
          exit 0
      fi

      PASSED=false
      function check_exit
      {
        rv=$?
        if [ $rv != 0 ]; then
          echo "Build attempt failed"
          PASSED=false
        else
          PASSED=true
        fi
      }

      for i in {1..3}
      do
        echo "Beginning Build attempt $i"
        trap 'check_exit' EXIT
        # copy the script below into your app code repo (e.g. ./scripts/deploy_cf.sh) and 'source' it from your pipeline job
        #    source ./scripts/deploy_cf.sh
        # alternatively, you can source it from online script:
        #    source <(curl -sSL "https://github.com/IBM/devex-skit-assets/raw/<release>/scripts/build_cf.sh")
        source <(curl -sSL "$DEVX_SKIT_ASSETS_GIT_URL_RAW/scripts/build_cf.sh")
        if [ "${PASSED}" == "true" ]; then
          echo "Build succeeded"
          exit 0
        fi
      done
      
      if [ "${PASSED}" == "false" ]; then
        msg="Build Failed :spinning-siren:"
        echo "${msg}"
        # copy the script below into your app code repo (e.g. ./scripts/slack_message.sh) and 'source' it from your pipeline job
        #    source ./scripts/slack_message.sh
        # alternatively, you can source it from online script:
        #    source <(curl -sSL "https://github.com/IBM/devex-skit-assets/raw/<release>/scripts/slack_message.sh")
        source <(curl -sSL "$DEVX_SKIT_ASSETS_GIT_URL_RAW/scripts/slack_message.sh") "${msg}"
        exit 1
      fi
  properties:
  - name: GIT_URL
    type: text
    value: ${GIT_URL}
  - name: DEVX_SKIT_ASSETS_GIT
    type: text
    value: IBM/devex-skit-assets
  - name: DEVX_SKIT_ASSETS_GIT_RELEASE
    type: text
    value: ${DEVX_SKIT_ASSETS_GIT_RELEASE}
  - name: DEVX_SKIT_ASSETS_GIT_URL
    type: text
    value: https://github.com/${DEVX_SKIT_ASSETS_GIT}.git
  - name: DEVX_SKIT_ASSETS_GIT_URL_RAW
    type: text
    value: https://github.com/${DEVX_SKIT_ASSETS_GIT}/raw/${DEVX_SKIT_ASSETS_GIT_RELEASE}
  - name: DEVX_SKIT_ASSETS_GIT_URL_CODE
    type: text
    value: https://codeload.github.com/${DEVX_SKIT_ASSETS_GIT}/tar.gz/${DEVX_SKIT_ASSETS_GIT_RELEASE}
  - name: DEPLOY_TARGET
    type: text
    value: cf
  - name: ENABLED_CF
    type: text
    value: ${ENABLED_CF}
  - name: DEVX_SLACK_CHANNEL_WEBHOOK
    type: secure
    value: ${DEVX_SLACK_CHANNEL_WEBHOOK}
  - name: OWNER_SLACK_CHANNEL_WEBHOOK
    type: secure
    value: ${OWNER_SLACK_CHANNEL_WEBHOOK}
  - name: PAGERDUTY_API_URL
    type: text
    value: ${PAGERDUTY_API_URL}
  - name: PAGERDUTY_EVENTS_API_URL
    type: text
    value: ${PAGERDUTY_EVENTS_API_URL}
  - name: PAGERDUTY_API_TOKEN
    type: secure
    value: ${PAGERDUTY_API_TOKEN}
  - name: PAGERDUTY_SVC_NAME
    type: secure
    value: ${PAGERDUTY_SVC_NAME}
  - name: ENABLE_PD_ALERTS
    type: text
    value: "true"
  - name: SKIT_REG_ENDPOINT
    type: text
    value: ${SKIT_REG_ENDPOINT}
  - name: SKIT_REG_AUTH_TOKEN
    type: secure
    value: ${SKIT_REG_AUTH_TOKEN}
  triggers:
  - events: '{"push":true,"pull_request":false,"pull_request_closed":false}'
    type: git
- name: Deploy
  inputs:
  - type: job
    job: Build
    stage: Build
  jobs:
  - name: Rolling Deploy
    type: deployer
    deploy_type: cf
    curatedDockerImage: default
    script: |
      #!/bin/bash
      # uncomment to debug the script
      # set -x

      if [ "${ENABLED_CF}" == "false" ]; then
          echo "CF pipeline is disabled for this toolchain"
          exit 0
      fi

      PASSED=false
      function check_exit
      {
        rv=$?
        if [ $rv != 0 ]; then
          echo "Deploy attempt failed"
          PASSED=false
        else
          PASSED=true
        fi
      }

      for i in {1..3}
      do
        echo "Beginning Deploy attempt $i"
        trap 'check_exit' EXIT
        # copy the script below into your app code repo (e.g. ./scripts/deploy_cf.sh) and 'source' it from your pipeline job
        #    source ./scripts/deploy_cf.sh
        # alternatively, you can source it from online script:
        #    source <(curl -sSL "https://github.com/IBM/devex-skit-assets/raw/<release>/scripts/deploy_cf.sh")
        source <(curl -sSL "$DEVX_SKIT_ASSETS_GIT_URL_RAW/scripts/deploy_cf.sh")
        if [ "${PASSED}" == "true" ]; then
          echo "Deploy succeeded"
          exit 0
        fi
      done

      if [ "${PASSED}" == "false" ]; then
        msg="Deploy Failed :spinning-siren:"
        echo "${msg}"
        # copy the script below into your app code repo (e.g. ./scripts/slack_message.sh) and 'source' it from your pipeline job
        #    source ./scripts/slack_message.sh
        # alternatively, you can source it from online script:
        #    source <(curl -sSL "https://github.com/IBM/devex-skit-assets/raw/<release>/scripts/slack_message.sh")
        source <(curl -sSL "$DEVX_SKIT_ASSETS_GIT_URL_RAW/scripts/slack_message.sh") "${msg}"
        exit 1
      fi
    target:
      api_key: ${API_KEY}
      application: ${APP_NAME}-monitored-cf
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      region_id: ${PROD_REGION_ID}
  properties:
  - name: buildProperties
    type: file
    value: build.properties
  triggers:
  - type: stage
- name: Verification
  inputs:
  - type: job
    job: Build
    stage: Build
  jobs:
  - name: Experience Test
    type: deployer
    deploy_type: cf
    curatedDockerImage: default
    script: |-
      #!/bin/bash
      # uncomment to debug the script
      # set -x

      if [ "${ENABLED_CF}" == "false" ]; then
          echo "CF pipeline is disabled for this toolchain"
          exit 0
      fi

      source <(curl -sSL "$DEVX_SKIT_ASSETS_GIT_URL_RAW/scripts/verification_experience_test.sh")
    target:
      api_key: ${API_KEY}
      application: ${APP_NAME}-monitored-cf
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      region_id: ${PROD_REGION_ID}
  properties:
  - name: buildProperties
    type: file
    value: build.properties
  triggers:
  - type: stage
properties: []
